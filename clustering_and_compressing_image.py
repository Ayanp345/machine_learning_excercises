# -*- coding: utf-8 -*-
"""clustering and compressing image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zcLtTAXxlzkeG3hJAP2qUpesw6vMtqE0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

student_data = pd.read_csv('/content/drive/MyDrive/dataset/student_clustering.csv')
X = student_data.values

plt.scatter(X[:, 0], X[:, 1], alpha=0.5)
plt.xlabel('CGPA')
plt.ylabel('IQ')
plt.title('Student Data Distribution')
plt.show()

def find_closest_centroids(X, centroids):
    K = centroids.shape[0]
    idx = np.zeros(X.shape[0], dtype=int)

    for i in range(X.shape[0]):
        distances = np.linalg.norm(X[i] - centroids, axis=1)
        idx[i] = np.argmin(distances)

    return idx

def compute_centroids(X, idx, K):

    centroids = np.zeros((K, X.shape[1]))
    for k in range(K):
        centroids[k] = np.mean(X[idx == k], axis=0)
    return centroids

def run_kmeans(X, initial_centroids, max_iters=10):

    centroids = initial_centroids
    for _ in range(max_iters):
        idx = find_closest_centroids(X, centroids)
        centroids = compute_centroids(X, idx, K=initial_centroids.shape[0])
    return centroids, idx

def kmeans_init_centroids(X, K):

    randidx = np.random.permutation(X.shape[0])
    return X[randidx[:K]]

K = 3
max_iters = 10

initial_centroids = kmeans_init_centroids(X, K)
centroids, idx = run_kmeans(X, initial_centroids, max_iters)

plt.scatter(X[:, 0], X[:, 1], c=idx, cmap='viridis')
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='x', s=100)
plt.xlabel('CGPA')
plt.ylabel('IQ')
plt.title('Student Clustering (Our Implementation)')
plt.show()

kmeans = KMeans(n_clusters=K, max_iter=max_iters, random_state=42)
kmeans.fit(X)

plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            c='red', marker='x', s=100)
plt.xlabel('CGPA')
plt.ylabel('IQ')
plt.title('Student Clustering (Scikit-Learn)')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from skimage import io
from sklearn.cluster import KMeans
from sklearn.utils import shuffle

def load_image(filename):

    image = io.imread('/content/drive/MyDrive/dataset/lara.jpg')
    # Convert to float and scale to [0,1] range
    image = np.array(image, dtype=np.float64) / 255
    return image

def prepare_image_data(image):

    w, h, d = image.shape
    image_array = np.reshape(image, (w * h, d))
    return image_array, w, h

def compress_image(image_array, w, h, K=16):


    kmeans = KMeans(n_clusters=K, random_state=42)
    kmeans.fit(image_array)

    compressed_array = kmeans.cluster_centers_[kmeans.labels_]
    compressed_image = compressed_array.reshape(w, h, -1)

    return compressed_image, kmeans.cluster_centers_

def display_results(original, compressed, K):

    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.imshow(original)
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(compressed)
    plt.title(f'Compressed Image ({K} colors)')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

# Main execution
if __name__ == "__main__":

    K = 16

    # Load and process and compressing image
    original_image = load_image('lara.jpg')
    image_array, w, h = prepare_image_data(original_image)

    compressed_image, colors = compress_image(image_array, w, h, K)

    # Show results
    display_results(original_image, compressed_image, K)

    print(f"Compressed to {K} colors:")
    print(np.array(colors * 255, dtype=np.uint8))

def show_color_palette(colors):
    """Display the color palette used in compression"""
    palette = np.zeros((100, len(colors)*100, 3))
    for i, color in enumerate(colors):
        palette[:, i*100:(i+1)*100] = color
    plt.figure(figsize=(16, 2))
    plt.imshow(palette)
    plt.axis('off')
    plt.title('Color Palette (16 colors)')
    plt.show()

show_color_palette(colors)